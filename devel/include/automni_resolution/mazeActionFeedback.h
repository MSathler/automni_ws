// Generated by gencpp from file automni_resolution/mazeActionFeedback.msg
// DO NOT EDIT!


#ifndef AUTOMNI_RESOLUTION_MESSAGE_MAZEACTIONFEEDBACK_H
#define AUTOMNI_RESOLUTION_MESSAGE_MAZEACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace automni_resolution
{
template <class ContainerAllocator>
struct mazeActionFeedback_
{
  typedef mazeActionFeedback_<ContainerAllocator> Type;

  mazeActionFeedback_()
    : odom(0.0)
    , collision()  {
    }
  mazeActionFeedback_(const ContainerAllocator& _alloc)
    : odom(0.0)
    , collision(_alloc)  {
  (void)_alloc;
    }



   typedef float _odom_type;
  _odom_type odom;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _collision_type;
  _collision_type collision;





  typedef boost::shared_ptr< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct mazeActionFeedback_

typedef ::automni_resolution::mazeActionFeedback_<std::allocator<void> > mazeActionFeedback;

typedef boost::shared_ptr< ::automni_resolution::mazeActionFeedback > mazeActionFeedbackPtr;
typedef boost::shared_ptr< ::automni_resolution::mazeActionFeedback const> mazeActionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automni_resolution::mazeActionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::automni_resolution::mazeActionFeedback_<ContainerAllocator1> & lhs, const ::automni_resolution::mazeActionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.odom == rhs.odom &&
    lhs.collision == rhs.collision;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::automni_resolution::mazeActionFeedback_<ContainerAllocator1> & lhs, const ::automni_resolution::mazeActionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace automni_resolution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bbabaecdceea6b492fa159f158a70d0";
  }

  static const char* value(const ::automni_resolution::mazeActionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bbabaecdceea6b4ULL;
  static const uint64_t static_value2 = 0x92fa159f158a70d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automni_resolution/mazeActionFeedback";
  }

  static const char* value(const ::automni_resolution::mazeActionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 odom\n"
"string collision\n"
"\n"
;
  }

  static const char* value(const ::automni_resolution::mazeActionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.odom);
      stream.next(m.collision);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mazeActionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automni_resolution::mazeActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automni_resolution::mazeActionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "odom: ";
    Printer<float>::stream(s, indent + "  ", v.odom);
    s << indent << "collision: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.collision);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMNI_RESOLUTION_MESSAGE_MAZEACTIONFEEDBACK_H
