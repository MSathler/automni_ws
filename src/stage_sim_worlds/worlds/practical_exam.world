name "/root/automni_ws/src/stage_sim_worlds/worlds/danone_1robots"
resolution 0.05
interval_sim 100
show_clock 1



define block model
(
  size [0.500 0.500 0.500]
  gui_nose 0
)

define topurg ranger
(
	sensor( 			
    range [ 0.0  30.0 ]
    fov 270.25
   samples 1081
  )

  # generic model properties
  color "black"
  size [ 0.050 0.050 0.100 ]
)

define erratic position
(
  #size [0.415 0.392 0.25]
  size [0.350 0.350 0.250]
  origin [-0.050 0.000 0.000 0.000]
  gui_nose 1
  drive "diff"
  topurg(pose [ 0.050 0.000 0.000 0.000 ])
)

define floorplan model
(
# sombre, sensible, artistic
color "gray30"

# most maps will need a bounding box
boundary 0

gui_nose 0
gui_grid 0

obstacle_return 0
gui_outline 0
gripper_return 0
fiducial_return 0
laser_return 1
)
        
window
( 
    size [ 1000.000000 1000.000000 ] # in pixels
    scale 8.0   # pixels per meter
    center [ 0  0 ]
    rotate [ 0  0 ]

    show_data 1              # 1=on 0=off
)
        
floorplan
( 
    name "/home/itv/automni_ws/src/stage_sim_worlds/worlds/danone_1robots"
    bitmap "/home/itv/automni_ws/src/stage_sim_worlds/floorplan_images/maze.jpg"
    size [ 140.000002 92.345680 0.4 ]
    pose [ 0.000001 0.000001 0 0 ]
)
        
define left_lidar ranger
(
    sensor(       
        # laser-specific properties
        range [ 0.0  20.0 ]
        fov 225.0
        samples 225
    )
    model
    (
        # generic model properties
        size [ 0.1 0.1 0.15 ]
        color "yellow"
        obstacle_return 0
    )
)
        
define right_lidar ranger
(
    sensor(       
        # laser-specific properties
        range [ 0.0  4.0 ]
        fov 257.0
        samples 257
    )
    model
    (
        # generic model properties
        size [ 0.15 0.15 0.1 ]
        color "yellow"
        obstacle_return 0
    )
)
        
define back_realsense camera
(
    pantilt [ 0.0 135.0]
    resolution [ 640 480 ]
    fov [ 90.0 90.0 ]
)
        
define rhino_base position 
(
    color "red"                   # Default color.
    drive "diff"                  # Differential steering model.
    gui_nose 0                    # Draw a nose on the robot so we can see which way it points
    obstacle_return 0             # Can hit things.
    ranger_return 0.5              # reflects sonar beams
    blob_return 1                 # Seen by blobfinders  
    fiducial_return 1             # Seen as "1" fiducial finders

    localization "gps"             
    localization_origin [0 0 0 0]   # Start odometry at (0, 0, 0).

    # alternative odometric localization with simple error model
    # localization "odom"              # Change to "gps" to have impossibly perfect, global odometry
    # odom_error [ 0.05 0.05 0.1 ]    # Odometry error or slip in X, Y and Theta
                                        # (Uniform random distribution)   

    # four DOF kinematics limits
    # [ xmin xmax ymin ymax zmin zmax amin amax ]        
    velocity_bounds [-3 3 0 0 0 0 -45.0 45.0 ]          
    acceleration_bounds [-1.0 1.0 0 0 0 0 -45 45.0 ]
)
        
define rhino_robot rhino_base
(  
    # actual size
    size [2.1 1.14 0.5]

    # the pioneer's center of rotation is offset from its center of area
    origin [0.85 0.025 0 0]

    # draw a nose on the robot so we can see which way it points
    gui_nose 0

    # estimated mass in KG
    mass 300.0

    # simplified Body shape:
    block( 
        points 18
        point[0]  [1.9  -0.3]
        point[1]  [1.9  0.3]
        point[2]  [1.8  0.3]
        point[3]  [1.8  0.5]
        point[4]  [1.30  0.5]
        point[5]  [1.25  0.54]
        point[6]  [1.0  0.54]
        point[7]  [1.0  0.38]
        point[8]  [-0.2  0.27]
        point[9]  [-0.2  0.08]
        point[10] [1.0  0.08]
        point[11] [1.0  -0.08]
        point[12] [-0.2  -0.08]
        point[13] [-0.2  -0.27]
        point[14] [1.0  -0.38]
        point[15] [1.5  -0.49]
        point[16] [1.7  -0.49]
        point[17] [1.7  -0.3]

        z [0 0.01]
    )

    right_lidar(pose [ 1.78 -0.36 -0.2 -35.5 ])
    left_lidar(pose [ 1.12 0.42 -0.2 90 ])
)
       

#rhino_robot 
#(
#    # can refer to the robot by this name
#    name "rhino_0"
#    color "red" 
#    pose [ -64.260000 -17.050000 0.000000 90.000000 ] 
#)

erratic( pose [ 0.0 40.000 0.000 -90.000 ] name "era" color "blue")
