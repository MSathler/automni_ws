########################################################
#
# How to create another world:
#   Change the floorplan bitmap to the image you want
#   From map.yaml resolution, calculate the window scale (scale = 1./resolution)
#   Set the window size based on the image size (in pixels)
#   Set the floorplan size (floorplan.size[i] = window.size[i]/window.scale, for i=0,1. floorplan.size[2] = height of "walls")
#
# How to add another robot:
#   Declare a new rhino_robot on the end file
#   Set the robot name, color and pose (x,y,z,yaw)
#
# Lidars coverage
#   You can change what the lidars will see by changing the obstacles/lidars heights
#   The right_lidar and left_lidar height are defined inside rhino_robot. Their poses are defined from the top of the robot. 
#   The lidars height to the floor are actually = rhino_robot.size[2] + right_lidar.pose[2]. The lidars will only see objects in this height.
#   If you want to ignore other robots, just make right_lidar.pose[2] > 0 (and also for the left left_lidar). It will see just objects above the robots height
#   If you want to ingnore the floorplan bitmap image (the walls), make floorplan.size[2] < rhino_robot.size[2] + right_lidar.pose[2] (and also for the left left_lidar)


########################################################
################### World Definition ###################

name "warehouse_sim"

# set the resolution of the underlying raytrace model in meters
resolution 0.02

interval_sim 100  # simulation timestep in milliseconds
show_clock 1

define floorplan model
(
  # sombre, sensible, artistic
  color "gray30"

  # most maps will need a bounding box
  boundary 1

  gui_nose 0
  gui_grid 0

  obstacle_return 0
  gui_outline 0
  gripper_return 0
  fiducial_return 0
  laser_return 1
)

window
( 
  size [ 800.0 800.0 ] # in pixels
  scale 20.0   # pixels per meter
  center [ 0  0 ]
  rotate [ 0  0 ]

  show_data 1              # 1=on 0=off
)

# load an environment bitmap

floorplan
( 
  name "empty"
  # bitmap "map.png"
  size [40.0 40.0 0.1]
  pose [ 0 0 0 0 ]
)

########################################################
################## Sensors Definition ##################

define left_lidar ranger
(
  sensor(       
    # laser-specific properties
    range [ 0.0  20.0 ]
    fov 225.0
    samples 225
  )
  model
  (
    # generic model properties
    size [ 0.1 0.1 0.15 ]
    color "yellow"
    obstacle_return 0
  )
)

define right_lidar ranger
(
  sensor(       
    # laser-specific properties
    range [ 0.0  4.0 ]
    fov 257.0
    samples 257
  )
  model
  (
    # generic model properties
    size [ 0.15 0.15 0.1 ]
    color "yellow"
    obstacle_return 0
  )
)

define back_realsense camera
(
  pantilt [ 0.0 135.0]
  resolution [ 640 480 ]
  fov [ 90.0 90.0 ]

)
########################################################
################### Rhino Definition ###################

define rhino_base position 
(
  color "red"                   # Default color.
  drive "diff"                  # Differential steering model.
  gui_nose 0                    # Draw a nose on the robot so we can see which way it points
  obstacle_return 0             # Can hit things.
  ranger_return 0.5              # reflects sonar beams
  blob_return 1                 # Seen by blobfinders  
  fiducial_return 1             # Seen as "1" fiducial finders

  localization "gps"             
  localization_origin [0 0 0 0]   # Start odometry at (0, 0, 0).

  # alternative odometric localization with simple error model
  # localization "odom"              # Change to "gps" to have impossibly perfect, global odometry
  # odom_error [ 0.05 0.05 0.1 ]    # Odometry error or slip in X, Y and Theta
                                     # (Uniform random distribution)   

  # four DOF kinematics limits
  # [ xmin xmax ymin ymax zmin zmax amin amax ]        
  velocity_bounds [-3 3 0 0 0 0 -45.0 45.0 ]          
  acceleration_bounds [-1.0 1.0 0 0 0 0 -45 45.0 ]
)


define rhino_robot rhino_base
(  
  # actual size
  size [2.1 1.14 0.5]

  # the pioneer's center of rotation is offset from its center of area
  origin [0.85 0.025 0 0]

  # draw a nose on the robot so we can see which way it points
  gui_nose 0

  # estimated mass in KG
  mass 300.0

  # simplified Body shape:
  block( 
    points 18
    point[0]  [1.9  -0.3]
    point[1]  [1.9  0.3]
    point[2]  [1.8  0.3]
    point[3]  [1.8  0.5]
    point[4]  [1.30  0.5]
    point[5]  [1.25  0.54]
    point[6]  [1.0  0.54]
    point[7]  [1.0  0.38]
    point[8]  [-0.2  0.27]
    point[9]  [-0.2  0.08]
    point[10] [1.0  0.08]
    point[11] [1.0  -0.08]
    point[12] [-0.2  -0.08]
    point[13] [-0.2  -0.27]
    point[14] [1.0  -0.38]
    point[15] [1.5  -0.49]
    point[16] [1.7  -0.49]
    point[17] [1.7  -0.3]

    z [0 0.01]
  )

  right_lidar(pose [ 1.78 -0.36 -0.2 -35.5 ])
  left_lidar(pose [ 1.12 0.42 -0.2 90 ])
)


########################################################
#################### Declare Rhinos ####################

rhino_robot 
(
  # can refer to the robot by this name
  name "rhino_0"
  color "red" 
  pose [ 0 0 0 0 ] 
)
